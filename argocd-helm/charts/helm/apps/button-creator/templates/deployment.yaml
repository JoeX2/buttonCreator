apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: "{{ .Chart.Name }}"
  name: "{{ .Chart.Name }}"
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      run: "{{ .Chart.Name }}"
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: "{{ .Chart.Name }}"
    spec:
      initContainers:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        env:
          - name: dbhost
            value: {{ .Values.environment.dbhost }}
          - name: dbname
            value: {{ .Values.environment.dbname }}
          - name: dbuser
            value: {{ .Values.environment.dbuser }}
          - name: dbpassword
            value: {{ .Values.environment.dbpassword }}
        ports:
        - name: health
          containerPort: 3333
        - name: http
          containerPort: 3333
        livenessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 120
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
